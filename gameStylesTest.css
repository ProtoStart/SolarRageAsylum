body{
	background-color: black;
	
}
.gameArea{ /*Using a class allows us to replace these values with other classes if needed*/
	width: 600px;
	height: 390px;
	border: 1px solid lime;
	
	position:fixed;
	
	background-color: black;	
	z-index: 8;
}

#gameArea *,
.gameArea *{
	text-align: left;
	position: relative;
	margin: 0px;
	padding: 0px;
}

.rainbowVortex,
#viewableArea{
	overflow: clip;
	width: 230px;
	height: 230px;
	border-radius: 115px;
	left: 210px;
	top: 62px;
	z-index: 1; /* Behind mockPC*/
}

.rainbowVortex img,
#viewableArea img{
	position: relative;
	left: -100px;
	top: -76px;
	border-radius: 115px;
	/*width: 250px;
	height: 250px;*/
}

.pcInHoverbed,
#mockPC{
	width: 50px; /* Match image*/
	height: 27px;
	left: 300px;
	top: 195px;
	z-index: 2; /* In front of viewable area*/
}

.ExtraBorder{ /*Extra border class to have on the game area, as a means of absorbing the rainbowVortex viewableArea effect*/
	/*	Previously using: half of viewableArea width - half mockPC width = 125 - 25  = 100 on each border
		Now using: a reduced value than that, as I've also restricted the game bounds in JS globals
	*/
	top: -100px;
	left:-90px;
	width: 740px; /*70px + 600px + 70px*/
	height: 530px;/*70px + 390px + 70px*/
}

button,input{
	height: 60px;
	/*min-width:100px;*/
	z-index: 10;
}

.storyTxt{
	z-index: 10;
	position: fixed;  /*Position needs to be set for z-index to take effect*/
	top:0px;
	left:0px;
	right:0px;
	background-color: rgba(30,30,30,0.9);/*(230,230,230,0.2);*/
	padding-bottom: 20px;
}

.storyTxt p{
	color: white;
	
}

#gameBtns{
	position: fixed;
	bottom: 56px;
	right: 0px;
	padding-bottom: 2px;
	/*background-color: #DDDDDD; Opaque, slightly off white background - Opaque prevents text looking awkward over the top of stuff behind it, off white is only subtly different from the generic white so doesn't draw attention to it much, but also does give a visible separation if people are looking at that area*/
	z-index: 10;
}
#gameBtns button{
	min-width:60px;
	width:60px;
	background-color: rgba(230,230,230,0.2);
}

#keyboardHint{
	max-width: 210px;
	display: none; /*MediaQuery ovverrides this if the screen is big enough*/
	color: white;
}

.masterBtn{
	position: fixed;
	bottom: 16px;
	right: 10px;
	z-index: 10;
}

#footer{
	background-color: rgba(30,30,30,0.9);
}



/****NO DEFAULT STYLES AFTER THIS COMMENT!
	MEDIA QUERIES IN SIZE ORDER ONLY
	(Media queries are usually for overriding styles for specific sizes of screen
		or to account for device dependant needs, 
		and as such we would not want default styles declared lower than MQ's where they might override a rule. 
		In the long run we're swithing to "mobile first design" principles.
		
		Common breakpoints according to https://www.freecodecamp.org/news/css-media-queries-breakpoints-media-types-standard-resolutions-and-more/
		320px—480px: Mobile devices
		481px—768px: iPads, Tablets
		769px—1024px: Small screens, laptops  - 769px still seems tiny to me
		1025px—1200px: Desktops, large screens
		1201px and more— Extra large screens, TV
****/
@media only screen and (min-width: 290px) {
/*Tiny width - It's very rare for modern devices to be narrower than this - Galaxy Fold is 280px, Galaxy Siii is 360px, iPhone 4 was 320px, iPhone X is 375*/
	*{
		/*border: 2px solid lime;*/
	}
}
@media only screen and (min-width: 400px) {
}

@media only screen and (min-width: 500px) {

}
@media only screen and (min-width: 769px) {
/*769px: The start size of laptops, small monitors*/

}
@media only screen and (min-width: 1024px) {
	/**/
	#keyboardHint{
	display: block;
	}
	#Version,
	#LeadBy{
	display: inline;/*none;*/
	}
	.masterBtn{
	bottom: 86px;
	right: 100px;
	}
	.gameArea{
		/*border: 20px solid lime;*/
		position: fixed;
		bottom: 22px;
		left: 0px;
		margin: 10px 30px 20px 30px;
	}
}
@media only screen and (min-width: 1200px) {
}
@media only screen and (min-height: 380px) {
	.ExtraBorder{
		top: -50px;
	}
}
@media only screen and (min-height: 400px) {
	.ExtraBorder{
		top: -40px;
	}
}
@media only screen and (min-height: 500px) {
	.gameArea{
		top: unset;
		bottom:10px;
		left:0px;
	}
}