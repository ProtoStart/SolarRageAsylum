body{
	background-color: black;
	
}
.gameArea{ /*Using a class allows us to replace these values with other classes if needed*/
	width: 600px;
	height: 390px;
	
	position:fixed;
	
	background-color: black;	
	z-index: 8;
}

#gameArea *,
.gameArea *{
	text-align: left;
	position: relative;
	margin: 0px;
	padding: 0px;
}

.limeBorder{
	border: 1px solid lime;
}

.rainbowVortex,
#viewableArea{
	overflow: clip;
	width: 230px;
	height: 230px;
	border-radius: 115px;
	left: 210px;
	top: 62px;
	z-index: 1; /* Behind mockPC*/
}

.rainbowVortex img,
#viewableArea img{
	position: relative;
	left: -100px;
	top: -76px;
	border-radius: 115px;
	/*width: 250px;
	height: 250px;*/
}

.pcInHoverbed,
#mockPC{
	width: 50px; /* Match image*/
	height: 27px;
	left: 300px;
	top: 195px;
	z-index: 2; /* In front of viewable area*/
}

.ExtraBorder{ /*Extra border class to have on the game area, as a means of absorbing the rainbowVortex viewableArea effect*/
	/*	Previously using: half of viewableArea width - half mockPC width = 125 - 25  = 100 on each border
		Now using: a reduced value than that, as I've also restricted the game bounds in JS globals
	*/
	top: -100px;
	left:-90px;
	width: 740px; /*70px + 600px + 70px*/
	height: 530px;/*70px + 390px + 70px*/
}

button,input{
	height: 60px;
	/*min-width:100px;*/
	z-index: 10;
}
.gameplayTopText,
.storyTxt{
/*	Both classes are primarily for text (sometimes inputs too) at the top of the screen,
	On small screens they are the same,
		but MediaQuerys (at the bottom of the stylesheet) resize them for bigger screens to different amounts
	
	.gameplayTopText is for text that will be on screen during gameplay,
		... so needs lots of room
	.storyTxt is for text and choices that happen in story scenes when the player cannot move the character around
*/
	z-index: 10;
	position: fixed;  /*Position needs to be set for z-index to take effect*/
	top:0px;
	left:0px;
	right:0px;
	background-color: rgba(30,30,30,0.9);/*(230,230,230,0.2);*/
	padding-bottom: 20px;
}

.gameplayTopText p,
.storyTxt p{
	color: white;
}

.openingScreen{
	z-index: 10;
	background-color: white;
	overflow-y: scroll;
	padding-bottom: 130px;
}

#screen001{
	margin-top: 10px;
}
#screen002{
	text-align: left; /*Less likely to be overlapped by buttons*/
	padding-left:4px; /*Need a little bit of padding when left aligned*/
	padding-right:4px;
}
#screen002 h1,
#screen002 h2{
	text-align: center; /*headings look silly left aligned here, and these are unlikely to ever be the last few lines, so we have an exception to the rule of aligning left for this screen*/
}

.middleWhiteTxt{
/*
	We now only attempt to centre these if the screen is small laptop sized or bigger

*/
	position:fixed;
    left: 0px;
	right:0px;
	bottom: 10px;
	top: 2px;
	height: 100%;
	max-width: 334px; /*Overidden on larger screens*/
	overflow-y: auto;
	
	margin-left: 2%;
	margin-right: 2%;
	color:white;
}

/*Tested out and haven't managed to make an effect I like with it*/
.haze{
	box-shadow: inset 0 0 2000px rgba(250, 250, 250, .9);
    filter: blur(60px);
	position: fixed;
	top:0px;
	left: 0px;
	height: 100%;
	width: 100%;
}

#gameBtns{
	position: fixed;
	top: 50%;
	/*bottom: 56px; commented instead of deleted in case we want to override it back to that on any size*/
    -moz-transform: translateY(-50%);
    -webkit-transform: translateY(-50%);
    transform: translateY(-50%);
	
	right: 0px;
	padding-bottom: 2px;
	/*background-color: #DDDDDD; Opaque, slightly off white background - Opaque prevents text looking awkward over the top of stuff behind it, off white is only subtly different from the generic white so doesn't draw attention to it much, but also does give a visible separation if people are looking at that area*/
	z-index: 10;
}
#gameBtns button{
	min-width:60px;
	width:60px;
	background-color: rgba(230,230,230,0.2);
}

#keyboardHint{
	max-width: 210px;
	display: none; /*MediaQuery ovverrides this if the screen is big enough*/
	color: white;
}

.masterBtn{
	position: fixed;
	bottom: 16px;
	right: 10px;
	z-index: 10;
}

#footer{
	background-color: rgba(30,30,30,0.9);
}

.footerFiller{
	height: 24px;
	width: 100%;
}

h1{
	font-size: 60pt;
	color: #ff850a;
	text-shadow: #000 0px 0px 7px;
    -webkit-font-smoothing: antialiased;
}
h2{
	font-size: 28pt;
}

:focus {
	outline: 3px solid gold;
	z-index: 50;
  /*outline: 1px dashed black;*/ /*Makes it a bit more discreet than the standard settings*/
  /*box-shadow: 1px 1px 1px 1px white;*/ /*So that focus is still visible on black backgrounds*/
  /*background-color: gold;*/
}
/*choiceBtns are divs that contain buttons for player choices*/
.choiceBtns button{
	margin-bottom: 2px; /*I needed a tiny bit more vertical margin on this kind of button, so that focus outline is never partially obscured. I tried fixing the issue with z-indexs but that got way more complex than this issue warranted*/
}

/*Colourful text to differentiate beeps and voices*/
.redBeep{
	color: red;
}
.orangeBeep{
	color: orange;
}
.yellowBeep{
	color: yellow;
}
.greenBeep{
	color: green;
}
.blueBeep{
	color: blue;
}
.indigoBeep{
	color: indigo;
}
.violetBeep{
	color: violet;
}
.goldBeep{
	color: gold;
}
.silverBeep{
	color: silver;
}
.bronzeBeep{
	color: bronze;
}
.limeBeep{
	color: lime;
}

p.employee1Voice{
	color: green;
}

/** wall colours **/
.westwall,
.paddedWall{
	border-width:0;
	background-color:rgba(30,230,30,0.25);
	/*TODO: Does it need a z-index so that it's above the rainbowVortex? maybe even the top text?*/
	
}

.invisible{
	/*As opposed to the "hidden" class https://www.w3schools.com/css/css_display_visibility.asp section Hide an Element - display:none or visibility:hidden? for more info plus a demo of the difference. TODO: I immediatly dislike the class namings for hidden and invisible as I'm putting this in - is it too late to change the old hidden class to notDisplayed or something like that??*/
	visibility: hidden;
}

.visible{
	visibility: visible;
}

/* TODO: ideally - set top etc via javascript to match where the code believes the boundary is for collision detection,  
		"top": "99",
		"right": "658",
		"bottom": "439",
		"left": "90"*/
#northWall{
	top: -147px;
	left: 0%;
	height: 2px;
	width: 100%;
}
#eastWall{
	left: 658px;
	top: -50%;
	height: 100%;
	width: 2px;
}
#southWall{
	bottom: -180px;
	left: 0%;
	height: 2px;
	width: 100%;
}
#westWall{
	left: 90px;
	top: -150%;
	height: 100%;
	width: 2px;
}
#westWallTopOverlap{
	top: 0px;
	bottom: 147px;
}

/****NO DEFAULT STYLES AFTER THIS COMMENT!
	MEDIA QUERIES IN SIZE ORDER ONLY
	(Media queries are usually for overriding styles for specific sizes of screen
		or to account for device dependant needs, 
		and as such we would not want default styles declared lower than MQ's where they might override a rule. 
		In the long run we're swithing to "mobile first design" principles.
		
		Common breakpoints according to https://www.freecodecamp.org/news/css-media-queries-breakpoints-media-types-standard-resolutions-and-more/
		320px—480px: Mobile devices
		481px—768px: iPads, Tablets
		769px—1024px: Small screens, laptops  - 769px still seems tiny to me
		1025px—1200px: Desktops, large screens
		1201px and more— Extra large screens, TV
****/
@media only screen and (min-width: 290px) {
/*Tiny width - It's very rare for modern devices to be narrower than this - Galaxy Fold is 280px, Galaxy Siii is 360px, iPhone 4 was 320px, iPhone X is 375*/
	/*{
		border: 2px solid lime;
	}*/
}
@media only screen and (min-width: 400px) {
}

@media only screen and (min-width: 500px) {

}
@media only screen and (min-width: 769px) {
/*769px: The start size of laptops, small monitors*/
	.middleWhiteTxt{
		/*	After a while of trying to figure a solution that fit requirements...
		...I adapted this from stackoverflow 
		- https://stackoverflow.com/questions/2005954/center-a-positionfixed-element
		- top: 50%; sets the top to 50% of the screen height
		- then transform: translateY(-50%) shifts it up by half of whatever the height of this is
		
		the small version has:
			position:fixed;
			left: 0px;
			right:0px;
			bottom: 10px;
			top: 2px;
			height: 100%;
		*/
		position: absolute;
		top: 50%;
		height: 98%; /*Avoids having toolbars unless needed*/
		max-height: 600px; /*The centred effect only comes in when the height of the div is noticeably bigger than the height. note that this MQ is on width not height which is what we want right now*/
		max-width: 100%; /*override the narrow max-width - it's only there so that on small screens other buttons won't cover over this text*/
		-moz-transform: translateY(-50%);
		-webkit-transform: translateY(-50%);
		transform: translateY(-50%);
	}
}
@media only screen and (min-width: 1024px) {
	/**/
	#keyboardHint{
	display: block;
	}
	#Version,
	#LeadBy{
	display: inline;/*none;*/
	}
	.masterBtn{
	bottom: 86px;
	right: 100px;
	}
	.gameArea{
		/*border: 20px solid lime;*/
		position: fixed;
		bottom: 22px;
		left: 0px;
		margin: 10px 30px 20px 30px;
	}
	h1{
	font-size: 80pt;
	color: #ff850a;
	text-shadow: #000 0px 0px 14px;
    -webkit-font-smoothing: antialiased;
	}
	h2{
		font-size: 44pt;
	}
	.smallPortraitScreenOnly{
		display: none;
	}
}
@media only screen and (min-width: 1200px) {
}
@media only screen and (min-height: 380px) {
	.ExtraBorder{
		top: -50px;
	}
}
@media only screen and (min-height: 400px) {
	.ExtraBorder{
		top: -40px;
	}
}
@media only screen and (min-height: 500px) {
	.gameArea{
		top: unset;
		bottom:10px;
		left:0px;
	}
}
@media only screen and (min-height: 600px) {
	.storyTxt{
		height: 190px;
	}
	.storyTxt > *{  /*All direct children of storytext class,  > means only direct children * means all kinds of element */
		position: relative;
		top: 50%;
		
		-moz-transform: translateY(-50%);
		-webkit-transform: translateY(-50%);
		transform: translateY(-50%);
	}
}
@media screen and (orientation:landscape){
	.smallPortraitScreenOnly{
		display: none;
	}
}