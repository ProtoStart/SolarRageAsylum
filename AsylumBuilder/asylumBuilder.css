.leftPanel{
	background-color: blue;
	color: white;
	position: fixed;
		bottom: 0px;
		top: 0px;
		left: 0px;
	width: 70%;
	overflow: auto;
}
.rightPanel{
	background-color: red;
	position: fixed;
		bottom: 0px;
		top: 0px;
		right: 0px;
	width: 30%;
	overflow-y: auto;
}

.rightPanel div{
	padding-bottom: 4px;
}

.grid{
	width:  900px;
	height:	900px;
}
.gridCell{
	min-height: 80px;
	min-width: 80px;
	width:  80px;
	height:	80px;
	font-size:20px;
}
 
/* Basic cell colour coding by labels. These styling rules are written as classes within specific classes to allow us to just change the class of the grid element to swap between colour code systems. The user chooses colour coding scheme via a select that swaps a class on the grid. Cells are given classes in the grid creation function, regardless of what kind of colour coding is in use, and those classes only need change when the data they are based on changes. */
.labelCCode .cellHasLbl{
	background-color: white;
}
 
.labelCCode .cellNoLbl{
	background-color: grey;
}

/*cell colour coding by design completeness, initially just set by the designer in a dropdown, later we might add the feature that the value changes to started when any value has been changed, and described when there are more than a set number of words in the description or maybe when they save a change to the description it prompts. Would be really awesome if it could go as far as being realted to roll out too, but I think that's beyond my skill at the moment. Starting this with a grey scale for default to described and then maybe traffic light and gold for cellComplete?*/
.designersNotesCCode .cellDefault{
	/*cell is still the default*/
	background-color: grey;
}
.designersNotesCCode .cellStarted{
	/*Some changes have been made to some form of data, might just be the label*/
	background-color: white;
}
.designersNotesCCode .cellDescribed{
	/*We know the purpose of the cell, and know whats going to be in there. You could say it's been designed but not implemented, in as much as we've thoroughly thought it through, but it's not yet ready to try out in alpha*/
	background-color: red;
}
.designersNotesCCode .cellAlphaReady{
	/*cell is implemented to a basic level that is good enough for the alpha area. We always check it in alpha and make sure if it needs more polish before we move it to Beta*/
	background-color: yellow;
}
.designersNotesCCode .cellBetaReady{
	/*cell has been in alpha, designer has played with it, thought it through and feels it's ready for Beta*/
	background-color: green;
}
.designersNotesCCode .cellBetaQuibbles{
	/*cell is in Beta and there are one or more things that players don't like about it, or theres some feeling of it still needing some work*/
	background-color: silver;
}
.designersNotesCCode .cellComplete{
	/*cell has been in Beta, non-designers have played it and all quibbles and frustrations have been looked at*/
	background-color: gold;
}

/* A reset for any gridCells when bounds CCode is on, in case we have a bounds type without css rules */
.boundsCCodeOn .gridCell{
	border-bottom-width: 3px;
	border-bottom-color: lime; /*lime because we want it to be obvious that the reset is in use*/
	border-bottom-style: solid;

	border-left-width: 3px;
	border-left-color: lime;
	border-left-style: solid;

	border-right-width: 3px;
	border-right-color: lime;
	border-right-style: solid;

	border-top-width: 3px;
	border-top-color: lime;
	border-top-style: solid;
}

/* wall */
.boundsCCodeOn .bottom-wall{
	border-bottom-width: 3px;
	border-bottom-color: black;
	border-bottom-style: double;
}
.boundsCCodeOn .left-wall{
	border-left-width: 3px;
	border-left-color: black;
	border-left-style: double;
}
.boundsCCodeOn .right-wall{
	border-right-width: 3px;
	border-right-color: black;
	border-right-style: double;
}
.boundsCCodeOn .top-wall{
	border-top-width: 3px;
	border-top-color: black;
	border-top-style: double;
}
/* fence */
.boundsCCodeOn .bottom-fence{
	border-bottom-width: 3px;
	border-bottom-color: cyan;
	border-bottom-style: solid;
}
.boundsCCodeOn .left-fence{
	border-left-width: 3px;
	border-left-color: cyan;
	border-left-style: solid;
}
.boundsCCodeOn .right-fence{
	border-right-width: 3px;
	border-right-color: cyan;
	border-right-style: solid;
}
.boundsCCodeOn .top-fence{
	border-top-width: 3px;
	border-top-color: cyan;
	border-top-style: solid;
}

/*regularDoor*/
.boundsCCodeOn .bottom-regularDoor{
	border-bottom-width: 3px;
	border-bottom-color: black;
	border-bottom-style: dashed;
}
.boundsCCodeOn .left-regularDoor{
	border-left-width: 3px;
	border-left-color: black;
	border-left-style: dashed;
}
.boundsCCodeOn .right-regularDoor{
	border-right-width: 3px;
	border-right-color: black;
	border-right-style: dashed;
}
.boundsCCodeOn .top-regularDoor{
	border-top-width: 3px;
	border-top-color: black;
	border-top-style: dashed;
}

/*keypadDoor*/
.boundsCCodeOn .bottom-keypadDoor{
	border-bottom-width: 3px;
	border-bottom-color: red;
	border-bottom-style: dotted;
}
.boundsCCodeOn .left-keypadDoor{
	border-left-width: 3px;
	border-left-color: red;
	border-left-style: dotted;
}
.boundsCCodeOn .right-keypadDoor{
	border-right-width: 3px;
	border-right-color: red;
	border-right-style: dotted;
}
.boundsCCodeOn .top-keypadDoor{
	border-top-width: 3px;
	border-top-color: red;
	border-top-style: dotted;
}

/*continueRoom*/
.boundsCCodeOn .bottom-continueRoom{
	border-bottom-width: 3px;
	border-bottom-color: white;
	border-bottom-style: none;
}
.boundsCCodeOn .left-continueRoom{
	border-left-width: 3px;
	border-left-color: white;
	border-left-style: none;
}
.boundsCCodeOn .right-continueRoom{
	border-right-width: 3px;
	border-right-color: white;
	border-right-style: none;
}
.boundsCCodeOn .top-continueRoom{
	border-top-width: 3px;
	border-top-color: white;
	border-top-style: none;
}

/*asylumExit*/
.boundsCCodeOn .bottom-asylumExit{
	border-bottom-width: 3px;
	border-bottom-color: teal;
	border-bottom-style: dashed;
}
.boundsCCodeOn .left-asylumExit{
	border-left-width: 3px;
	border-left-color: teal;
	border-left-style: dashed;
}
.boundsCCodeOn .right-asylumExit{
	border-right-width: 3px;
	border-right-color: teal;
	border-right-style: dashed;
}
.boundsCCodeOn .top-asylumExit{
	border-top-width: 3px;
	border-top-color: teal;
	border-top-style: dashed;
}

/*customCodedType*/
.boundsCCodeOn .bottom-customCodedType{
	border-bottom-width: 3px;
	border-bottom-color: pink;
	border-bottom-style: solid;
}
.boundsCCodeOn .left-customCodedType{
	border-left-width: 3px;
	border-left-color: pink;
	border-left-style: solid;
}
.boundsCCodeOn .right-customCodedType{
	border-right-width: 3px;
	border-right-color: pink;
	border-right-style: solid;
}
.boundsCCodeOn .top-customCodedType{
	border-top-width: 3px;
	border-top-color: pink;
	border-top-style: solid;
}

.inlineButton{
	min-height: 1.4em;
	min-width: default;
	width:  default;
	height:	1.4em;
	font-size: 14pt;
}
.doublelineButton{
	min-height: 3.2em;
	min-width: 120px;
	width:  9em;
	height:	3.2em;
	font-size: 16pt;
}

.shortTextbox{
	width: 5em;
}

#boundTypes select{
	right: 0px;
	position: absolute;
}

#jsonEditor{
	width:99%;
	height: 99%;
}

#jsonTextArea{
	width:99%;
	height: calc(100% - 50px);
}

#roomEditorPanelChoice{
	font-size: 17pt;
	font-weight: 555;
	padding: 6px;
}

#cellDescription{
	width: calc(100% - 12px);
}

#asylumNotes{
	width: 98%;
	height: 12em;
}

/****NO DEFAULT STYLES AFTER THIS COMMENT!, MEDIA QUERIES IN SIZE ORDER (Media queries are usually for overriding styles for specific sizes of screen or to account for device dependant needs, and as such we would not want default styles declared lower than MQ's where they might override a rule. Use mobile first design principles - main css should work for tiny screens, then use media queries to make changes for bigger screen sizes.****/

@media only screen and (min-width: 1024px) {
/*min-width: 1024px == Monitors, laptops and bigger*/
	#roomEditorPanelChoice{
		font-size: 20pt;
	}

}